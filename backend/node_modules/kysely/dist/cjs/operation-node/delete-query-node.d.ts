import { FromNode } from 'kysely/dist/cjs/operation-node/from-node.js';
import { JoinNode } from 'kysely/dist/cjs/operation-node/join-node.js';
import { OperationNode } from 'kysely/dist/cjs/operation-node/operation-node.js';
import { ReturningNode } from 'kysely/dist/cjs/operation-node/returning-node.js';
import { WhereNode } from 'kysely/dist/cjs/operation-node/where-node.js';
import { WithNode } from 'kysely/dist/cjs/operation-node/with-node.js';
import { LimitNode } from 'kysely/dist/cjs/operation-node/limit-node.js';
import { OrderByNode } from 'kysely/dist/cjs/operation-node/order-by-node.js';
import { OrderByItemNode } from 'kysely/dist/cjs/operation-node/order-by-item-node.js';
import { ExplainNode } from 'kysely/dist/cjs/operation-node/explain-node.js';
import { UsingNode } from 'kysely/dist/cjs/operation-node/using-node.js';
import { TopNode } from 'kysely/dist/cjs/operation-node/top-node.js';
import { OutputNode } from 'kysely/dist/cjs/operation-node/output-node.js';
export interface DeleteQueryNode extends OperationNode {
    readonly kind: 'DeleteQueryNode';
    readonly from: FromNode;
    readonly using?: UsingNode;
    readonly joins?: ReadonlyArray<JoinNode>;
    readonly where?: WhereNode;
    readonly returning?: ReturningNode;
    readonly with?: WithNode;
    readonly orderBy?: OrderByNode;
    readonly limit?: LimitNode;
    readonly explain?: ExplainNode;
    readonly endModifiers?: ReadonlyArray<OperationNode>;
    readonly top?: TopNode;
    readonly output?: OutputNode;
}
/**
 * @internal
 */
export declare const DeleteQueryNode: Readonly<{
    is(node: OperationNode): node is DeleteQueryNode;
    create(fromItems: OperationNode[], withNode?: WithNode): DeleteQueryNode;
    /**
     * @deprecated Use `QueryNode.cloneWithoutOrderBy` instead.
     */
    cloneWithOrderByItems: (node: DeleteQueryNode, items: ReadonlyArray<OrderByItemNode>) => DeleteQueryNode;
    /**
     * @deprecated Use `QueryNode.cloneWithoutOrderBy` instead.
     */
    cloneWithoutOrderBy: (node: DeleteQueryNode) => DeleteQueryNode;
    cloneWithLimit(deleteNode: DeleteQueryNode, limit: LimitNode): DeleteQueryNode;
    cloneWithoutLimit(deleteNode: DeleteQueryNode): DeleteQueryNode;
    cloneWithUsing(deleteNode: DeleteQueryNode, tables: OperationNode[]): DeleteQueryNode;
}>;
