import { ColumnNode } from 'kysely/dist/cjs/operation-node/column-node.js';
import { ExplainNode } from 'kysely/dist/cjs/operation-node/explain-node.js';
import { OnConflictNode } from 'kysely/dist/cjs/operation-node/on-conflict-node.js';
import { OnDuplicateKeyNode } from 'kysely/dist/cjs/operation-node/on-duplicate-key-node.js';
import { OperationNode } from 'kysely/dist/cjs/operation-node/operation-node.js';
import { OrActionNode } from 'kysely/dist/cjs/operation-node/or-action-node.js';
import { OutputNode } from 'kysely/dist/cjs/operation-node/output-node.js';
import { ReturningNode } from 'kysely/dist/cjs/operation-node/returning-node.js';
import { TableNode } from 'kysely/dist/cjs/operation-node/table-node.js';
import { TopNode } from 'kysely/dist/cjs/operation-node/top-node.js';
import { WithNode } from 'kysely/dist/cjs/operation-node/with-node.js';
export type InsertQueryNodeProps = Omit<InsertQueryNode, 'kind' | 'into'>;
export interface InsertQueryNode extends OperationNode {
    readonly kind: 'InsertQueryNode';
    readonly into?: TableNode;
    readonly columns?: ReadonlyArray<ColumnNode>;
    readonly values?: OperationNode;
    readonly returning?: ReturningNode;
    readonly onConflict?: OnConflictNode;
    readonly onDuplicateKey?: OnDuplicateKeyNode;
    readonly with?: WithNode;
    /** @deprecated use {@link orAction} instead. */
    readonly ignore?: boolean;
    readonly orAction?: OrActionNode;
    readonly replace?: boolean;
    readonly explain?: ExplainNode;
    readonly defaultValues?: boolean;
    readonly endModifiers?: ReadonlyArray<OperationNode>;
    readonly top?: TopNode;
    readonly output?: OutputNode;
}
/**
 * @internal
 */
export declare const InsertQueryNode: Readonly<{
    is(node: OperationNode): node is InsertQueryNode;
    create(into: TableNode, withNode?: WithNode, replace?: boolean): InsertQueryNode;
    createWithoutInto(): InsertQueryNode;
    cloneWith(insertQuery: InsertQueryNode, props: InsertQueryNodeProps): InsertQueryNode;
}>;
