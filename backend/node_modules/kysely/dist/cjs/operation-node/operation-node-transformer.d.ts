import { AliasNode } from 'kysely/dist/cjs/operation-node/alias-node.js';
import { ColumnNode } from 'kysely/dist/cjs/operation-node/column-node.js';
import { IdentifierNode } from 'kysely/dist/cjs/operation-node/identifier-node.js';
import { OperationNode } from 'kysely/dist/cjs/operation-node/operation-node.js';
import { ReferenceNode } from 'kysely/dist/cjs/operation-node/reference-node.js';
import { SelectAllNode } from 'kysely/dist/cjs/operation-node/select-all-node.js';
import { SelectionNode } from 'kysely/dist/cjs/operation-node/selection-node.js';
import { TableNode } from 'kysely/dist/cjs/operation-node/table-node.js';
import { AndNode } from 'kysely/dist/cjs/operation-node/and-node.js';
import { JoinNode } from 'kysely/dist/cjs/operation-node/join-node.js';
import { OrNode } from 'kysely/dist/cjs/operation-node/or-node.js';
import { ParensNode } from 'kysely/dist/cjs/operation-node/parens-node.js';
import { PrimitiveValueListNode } from 'kysely/dist/cjs/operation-node/primitive-value-list-node.js';
import { RawNode } from 'kysely/dist/cjs/operation-node/raw-node.js';
import { SelectQueryNode } from 'kysely/dist/cjs/operation-node/select-query-node.js';
import { ValueListNode } from 'kysely/dist/cjs/operation-node/value-list-node.js';
import { ValueNode } from 'kysely/dist/cjs/operation-node/value-node.js';
import { OperatorNode } from 'kysely/dist/cjs/operation-node/operator-node.js';
import { FromNode } from 'kysely/dist/cjs/operation-node/from-node.js';
import { WhereNode } from 'kysely/dist/cjs/operation-node/where-node.js';
import { InsertQueryNode } from 'kysely/dist/cjs/operation-node/insert-query-node.js';
import { DeleteQueryNode } from 'kysely/dist/cjs/operation-node/delete-query-node.js';
import { ReturningNode } from 'kysely/dist/cjs/operation-node/returning-node.js';
import { CreateTableNode } from 'kysely/dist/cjs/operation-node/create-table-node.js';
import { AddColumnNode } from 'kysely/dist/cjs/operation-node/add-column-node.js';
import { DropTableNode } from 'kysely/dist/cjs/operation-node/drop-table-node.js';
import { DataTypeNode } from 'kysely/dist/cjs/operation-node/data-type-node.js';
import { OrderByNode } from 'kysely/dist/cjs/operation-node/order-by-node.js';
import { OrderByItemNode } from 'kysely/dist/cjs/operation-node/order-by-item-node.js';
import { GroupByNode } from 'kysely/dist/cjs/operation-node/group-by-node.js';
import { GroupByItemNode } from 'kysely/dist/cjs/operation-node/group-by-item-node.js';
import { UpdateQueryNode } from 'kysely/dist/cjs/operation-node/update-query-node.js';
import { ColumnUpdateNode } from 'kysely/dist/cjs/operation-node/column-update-node.js';
import { LimitNode } from 'kysely/dist/cjs/operation-node/limit-node.js';
import { OffsetNode } from 'kysely/dist/cjs/operation-node/offset-node.js';
import { OnConflictNode } from 'kysely/dist/cjs/operation-node/on-conflict-node.js';
import { CreateIndexNode } from 'kysely/dist/cjs/operation-node/create-index-node.js';
import { ListNode } from 'kysely/dist/cjs/operation-node/list-node.js';
import { DropIndexNode } from 'kysely/dist/cjs/operation-node/drop-index-node.js';
import { PrimaryKeyConstraintNode } from 'kysely/dist/cjs/operation-node/primary-key-constraint-node.js';
import { UniqueConstraintNode } from 'kysely/dist/cjs/operation-node/unique-constraint-node.js';
import { ReferencesNode } from 'kysely/dist/cjs/operation-node/references-node.js';
import { CheckConstraintNode } from 'kysely/dist/cjs/operation-node/check-constraint-node.js';
import { WithNode } from 'kysely/dist/cjs/operation-node/with-node.js';
import { CommonTableExpressionNode } from 'kysely/dist/cjs/operation-node/common-table-expression-node.js';
import { CommonTableExpressionNameNode } from 'kysely/dist/cjs/operation-node/common-table-expression-name-node.js';
import { HavingNode } from 'kysely/dist/cjs/operation-node/having-node.js';
import { CreateSchemaNode } from 'kysely/dist/cjs/operation-node/create-schema-node.js';
import { DropSchemaNode } from 'kysely/dist/cjs/operation-node/drop-schema-node.js';
import { AlterTableNode } from 'kysely/dist/cjs/operation-node/alter-table-node.js';
import { DropColumnNode } from 'kysely/dist/cjs/operation-node/drop-column-node.js';
import { RenameColumnNode } from 'kysely/dist/cjs/operation-node/rename-column-node.js';
import { AlterColumnNode } from 'kysely/dist/cjs/operation-node/alter-column-node.js';
import { AddConstraintNode } from 'kysely/dist/cjs/operation-node/add-constraint-node.js';
import { DropConstraintNode } from 'kysely/dist/cjs/operation-node/drop-constraint-node.js';
import { ForeignKeyConstraintNode } from 'kysely/dist/cjs/operation-node/foreign-key-constraint-node.js';
import { ColumnDefinitionNode } from 'kysely/dist/cjs/operation-node/column-definition-node.js';
import { ModifyColumnNode } from 'kysely/dist/cjs/operation-node/modify-column-node.js';
import { OnDuplicateKeyNode } from 'kysely/dist/cjs/operation-node/on-duplicate-key-node.js';
import { CreateViewNode } from 'kysely/dist/cjs/operation-node/create-view-node.js';
import { DropViewNode } from 'kysely/dist/cjs/operation-node/drop-view-node.js';
import { GeneratedNode } from 'kysely/dist/cjs/operation-node/generated-node.js';
import { DefaultValueNode } from 'kysely/dist/cjs/operation-node/default-value-node.js';
import { OnNode } from 'kysely/dist/cjs/operation-node/on-node.js';
import { ValuesNode } from 'kysely/dist/cjs/operation-node/values-node.js';
import { SelectModifierNode } from 'kysely/dist/cjs/operation-node/select-modifier-node.js';
import { CreateTypeNode } from 'kysely/dist/cjs/operation-node/create-type-node.js';
import { DropTypeNode } from 'kysely/dist/cjs/operation-node/drop-type-node.js';
import { ExplainNode } from 'kysely/dist/cjs/operation-node/explain-node.js';
import { SchemableIdentifierNode } from 'kysely/dist/cjs/operation-node/schemable-identifier-node.js';
import { DefaultInsertValueNode } from 'kysely/dist/cjs/operation-node/default-insert-value-node.js';
import { AggregateFunctionNode } from 'kysely/dist/cjs/operation-node/aggregate-function-node.js';
import { OverNode } from 'kysely/dist/cjs/operation-node/over-node.js';
import { PartitionByNode } from 'kysely/dist/cjs/operation-node/partition-by-node.js';
import { PartitionByItemNode } from 'kysely/dist/cjs/operation-node/partition-by-item-node.js';
import { SetOperationNode } from 'kysely/dist/cjs/operation-node/set-operation-node.js';
import { BinaryOperationNode } from 'kysely/dist/cjs/operation-node/binary-operation-node.js';
import { UnaryOperationNode } from 'kysely/dist/cjs/operation-node/unary-operation-node.js';
import { UsingNode } from 'kysely/dist/cjs/operation-node/using-node.js';
import { FunctionNode } from 'kysely/dist/cjs/operation-node/function-node.js';
import { CaseNode } from 'kysely/dist/cjs/operation-node/case-node.js';
import { WhenNode } from 'kysely/dist/cjs/operation-node/when-node.js';
import { JSONReferenceNode } from 'kysely/dist/cjs/operation-node/json-reference-node.js';
import { JSONPathNode } from 'kysely/dist/cjs/operation-node/json-path-node.js';
import { JSONPathLegNode } from 'kysely/dist/cjs/operation-node/json-path-leg-node.js';
import { JSONOperatorChainNode } from 'kysely/dist/cjs/operation-node/json-operator-chain-node.js';
import { TupleNode } from 'kysely/dist/cjs/operation-node/tuple-node.js';
import { MergeQueryNode } from 'kysely/dist/cjs/operation-node/merge-query-node.js';
import { MatchedNode } from 'kysely/dist/cjs/operation-node/matched-node.js';
import { AddIndexNode } from 'kysely/dist/cjs/operation-node/add-index-node.js';
import { CastNode } from 'kysely/dist/cjs/operation-node/cast-node.js';
import { FetchNode } from 'kysely/dist/cjs/operation-node/fetch-node.js';
import { TopNode } from 'kysely/dist/cjs/operation-node/top-node.js';
import { OutputNode } from 'kysely/dist/cjs/operation-node/output-node.js';
import { RefreshMaterializedViewNode } from 'kysely/dist/cjs/operation-node/refresh-materialized-view-node.js';
import { OrActionNode } from 'kysely/dist/cjs/operation-node/or-action-node.js';
import { CollateNode } from 'kysely/dist/cjs/operation-node/collate-node.js';
import { QueryId } from 'kysely/dist/cjs/util/query-id.js';
import { RenameConstraintNode } from 'kysely/dist/cjs/operation-node/rename-constraint-node.js';
/**
 * Transforms an operation node tree into another one.
 *
 * Kysely queries are expressed internally as a tree of objects (operation nodes).
 * `OperationNodeTransformer` takes such a tree as its input and returns a
 * transformed deep copy of it. By default the `OperationNodeTransformer`
 * does nothing. You need to override one or more methods to make it do
 * something.
 *
 * There's a method for each node type. For example if you'd like to convert
 * each identifier (table name, column name, alias etc.) from camelCase to
 * snake_case, you'd do something like this:
 *
 * ```ts
 * import { type IdentifierNode, OperationNodeTransformer } from 'kysely'
 * import snakeCase from 'lodash/snakeCase'
 *
 * class CamelCaseTransformer extends OperationNodeTransformer {
 *   override transformIdentifier(node: IdentifierNode): IdentifierNode {
 *     node = super.transformIdentifier(node)
 *
 *     return {
 *       ...node,
 *       name: snakeCase(node.name),
 *     }
 *   }
 * }
 *
 * const transformer = new CamelCaseTransformer()
 *
 * const query = db.selectFrom('person').select(['first_name', 'last_name'])
 *
 * const tree = transformer.transformNode(query.toOperationNode())
 * ```
 */
export declare class OperationNodeTransformer {
    #private;
    protected readonly nodeStack: OperationNode[];
    transformNode<T extends OperationNode | undefined>(node: T, queryId?: QueryId): T;
    protected transformNodeImpl<T extends OperationNode>(node: T, queryId?: QueryId): T;
    protected transformNodeList<T extends ReadonlyArray<OperationNode> | undefined>(list: T, queryId?: QueryId): T;
    protected transformSelectQuery(node: SelectQueryNode, queryId?: QueryId): SelectQueryNode;
    protected transformSelection(node: SelectionNode, queryId?: QueryId): SelectionNode;
    protected transformColumn(node: ColumnNode, queryId?: QueryId): ColumnNode;
    protected transformAlias(node: AliasNode, queryId?: QueryId): AliasNode;
    protected transformTable(node: TableNode, queryId?: QueryId): TableNode;
    protected transformFrom(node: FromNode, queryId?: QueryId): FromNode;
    protected transformReference(node: ReferenceNode, queryId?: QueryId): ReferenceNode;
    protected transformAnd(node: AndNode, queryId?: QueryId): AndNode;
    protected transformOr(node: OrNode, queryId?: QueryId): OrNode;
    protected transformValueList(node: ValueListNode, queryId?: QueryId): ValueListNode;
    protected transformParens(node: ParensNode, queryId?: QueryId): ParensNode;
    protected transformJoin(node: JoinNode, queryId?: QueryId): JoinNode;
    protected transformRaw(node: RawNode, queryId?: QueryId): RawNode;
    protected transformWhere(node: WhereNode, queryId?: QueryId): WhereNode;
    protected transformInsertQuery(node: InsertQueryNode, queryId?: QueryId): InsertQueryNode;
    protected transformValues(node: ValuesNode, queryId?: QueryId): ValuesNode;
    protected transformDeleteQuery(node: DeleteQueryNode, queryId?: QueryId): DeleteQueryNode;
    protected transformReturning(node: ReturningNode, queryId?: QueryId): ReturningNode;
    protected transformCreateTable(node: CreateTableNode, queryId?: QueryId): CreateTableNode;
    protected transformColumnDefinition(node: ColumnDefinitionNode, queryId?: QueryId): ColumnDefinitionNode;
    protected transformAddColumn(node: AddColumnNode, queryId?: QueryId): AddColumnNode;
    protected transformDropTable(node: DropTableNode, queryId?: QueryId): DropTableNode;
    protected transformOrderBy(node: OrderByNode, queryId?: QueryId): OrderByNode;
    protected transformOrderByItem(node: OrderByItemNode, queryId?: QueryId): OrderByItemNode;
    protected transformGroupBy(node: GroupByNode, queryId?: QueryId): GroupByNode;
    protected transformGroupByItem(node: GroupByItemNode, queryId?: QueryId): GroupByItemNode;
    protected transformUpdateQuery(node: UpdateQueryNode, queryId?: QueryId): UpdateQueryNode;
    protected transformColumnUpdate(node: ColumnUpdateNode, queryId?: QueryId): ColumnUpdateNode;
    protected transformLimit(node: LimitNode, queryId?: QueryId): LimitNode;
    protected transformOffset(node: OffsetNode, queryId?: QueryId): OffsetNode;
    protected transformOnConflict(node: OnConflictNode, queryId?: QueryId): OnConflictNode;
    protected transformOnDuplicateKey(node: OnDuplicateKeyNode, queryId?: QueryId): OnDuplicateKeyNode;
    protected transformCreateIndex(node: CreateIndexNode, queryId?: QueryId): CreateIndexNode;
    protected transformList(node: ListNode, queryId?: QueryId): ListNode;
    protected transformDropIndex(node: DropIndexNode, queryId?: QueryId): DropIndexNode;
    protected transformPrimaryKeyConstraint(node: PrimaryKeyConstraintNode, queryId?: QueryId): PrimaryKeyConstraintNode;
    protected transformUniqueConstraint(node: UniqueConstraintNode, queryId?: QueryId): UniqueConstraintNode;
    protected transformForeignKeyConstraint(node: ForeignKeyConstraintNode, queryId?: QueryId): ForeignKeyConstraintNode;
    protected transformSetOperation(node: SetOperationNode, queryId?: QueryId): SetOperationNode;
    protected transformReferences(node: ReferencesNode, queryId?: QueryId): ReferencesNode;
    protected transformCheckConstraint(node: CheckConstraintNode, queryId?: QueryId): CheckConstraintNode;
    protected transformWith(node: WithNode, queryId?: QueryId): WithNode;
    protected transformCommonTableExpression(node: CommonTableExpressionNode, queryId?: QueryId): CommonTableExpressionNode;
    protected transformCommonTableExpressionName(node: CommonTableExpressionNameNode, queryId?: QueryId): CommonTableExpressionNameNode;
    protected transformHaving(node: HavingNode, queryId?: QueryId): HavingNode;
    protected transformCreateSchema(node: CreateSchemaNode, queryId?: QueryId): CreateSchemaNode;
    protected transformDropSchema(node: DropSchemaNode, queryId?: QueryId): DropSchemaNode;
    protected transformAlterTable(node: AlterTableNode, queryId?: QueryId): AlterTableNode;
    protected transformDropColumn(node: DropColumnNode, queryId?: QueryId): DropColumnNode;
    protected transformRenameColumn(node: RenameColumnNode, queryId?: QueryId): RenameColumnNode;
    protected transformAlterColumn(node: AlterColumnNode, queryId?: QueryId): AlterColumnNode;
    protected transformModifyColumn(node: ModifyColumnNode, queryId?: QueryId): ModifyColumnNode;
    protected transformAddConstraint(node: AddConstraintNode, queryId?: QueryId): AddConstraintNode;
    protected transformDropConstraint(node: DropConstraintNode, queryId?: QueryId): DropConstraintNode;
    protected transformRenameConstraint(node: RenameConstraintNode, queryId?: QueryId): RenameConstraintNode;
    protected transformCreateView(node: CreateViewNode, queryId?: QueryId): CreateViewNode;
    protected transformRefreshMaterializedView(node: RefreshMaterializedViewNode, queryId?: QueryId): RefreshMaterializedViewNode;
    protected transformDropView(node: DropViewNode, queryId?: QueryId): DropViewNode;
    protected transformGenerated(node: GeneratedNode, queryId?: QueryId): GeneratedNode;
    protected transformDefaultValue(node: DefaultValueNode, queryId?: QueryId): DefaultValueNode;
    protected transformOn(node: OnNode, queryId?: QueryId): OnNode;
    protected transformSelectModifier(node: SelectModifierNode, queryId?: QueryId): SelectModifierNode;
    protected transformCreateType(node: CreateTypeNode, queryId?: QueryId): CreateTypeNode;
    protected transformDropType(node: DropTypeNode, queryId?: QueryId): DropTypeNode;
    protected transformExplain(node: ExplainNode, queryId?: QueryId): ExplainNode;
    protected transformSchemableIdentifier(node: SchemableIdentifierNode, queryId?: QueryId): SchemableIdentifierNode;
    protected transformAggregateFunction(node: AggregateFunctionNode, queryId?: QueryId): AggregateFunctionNode;
    protected transformOver(node: OverNode, queryId?: QueryId): OverNode;
    protected transformPartitionBy(node: PartitionByNode, queryId?: QueryId): PartitionByNode;
    protected transformPartitionByItem(node: PartitionByItemNode, queryId?: QueryId): PartitionByItemNode;
    protected transformBinaryOperation(node: BinaryOperationNode, queryId?: QueryId): BinaryOperationNode;
    protected transformUnaryOperation(node: UnaryOperationNode, queryId?: QueryId): UnaryOperationNode;
    protected transformUsing(node: UsingNode, queryId?: QueryId): UsingNode;
    protected transformFunction(node: FunctionNode, queryId?: QueryId): FunctionNode;
    protected transformCase(node: CaseNode, queryId?: QueryId): CaseNode;
    protected transformWhen(node: WhenNode, queryId?: QueryId): WhenNode;
    protected transformJSONReference(node: JSONReferenceNode, queryId?: QueryId): JSONReferenceNode;
    protected transformJSONPath(node: JSONPathNode, queryId?: QueryId): JSONPathNode;
    protected transformJSONPathLeg(node: JSONPathLegNode, _queryId?: QueryId): JSONPathLegNode;
    protected transformJSONOperatorChain(node: JSONOperatorChainNode, queryId?: QueryId): JSONOperatorChainNode;
    protected transformTuple(node: TupleNode, queryId?: QueryId): TupleNode;
    protected transformMergeQuery(node: MergeQueryNode, queryId?: QueryId): MergeQueryNode;
    protected transformMatched(node: MatchedNode, _queryId?: QueryId): MatchedNode;
    protected transformAddIndex(node: AddIndexNode, queryId?: QueryId): AddIndexNode;
    protected transformCast(node: CastNode, queryId?: QueryId): CastNode;
    protected transformFetch(node: FetchNode, queryId?: QueryId): FetchNode;
    protected transformTop(node: TopNode, _queryId?: QueryId): TopNode;
    protected transformOutput(node: OutputNode, queryId?: QueryId): OutputNode;
    protected transformDataType(node: DataTypeNode, _queryId?: QueryId): DataTypeNode;
    protected transformSelectAll(node: SelectAllNode, _queryId?: QueryId): SelectAllNode;
    protected transformIdentifier(node: IdentifierNode, _queryId?: QueryId): IdentifierNode;
    protected transformValue(node: ValueNode, _queryId?: QueryId): ValueNode;
    protected transformPrimitiveValueList(node: PrimitiveValueListNode, _queryId?: QueryId): PrimitiveValueListNode;
    protected transformOperator(node: OperatorNode, _queryId?: QueryId): OperatorNode;
    protected transformDefaultInsertValue(node: DefaultInsertValueNode, _queryId?: QueryId): DefaultInsertValueNode;
    protected transformOrAction(node: OrActionNode, _queryId?: QueryId): OrActionNode;
    protected transformCollate(node: CollateNode, _queryId?: QueryId): CollateNode;
}
