import type { UpdateQueryBuilder } from 'kysely/dist/cjs/query-builder/update-query-builder.js';
import type { UpdateResult } from 'kysely/dist/cjs/query-builder/update-result.js';
import type { ShallowRecord } from 'kysely/dist/cjs/util/type-utils.js';
import type { ExtractTableAlias, From, FromTables, TableExpressionOrList } from 'kysely/dist/cjs/parser/table-parser.js';
export type UpdateTable<DB, TE extends TableExpressionOrList<DB, never>> = TE extends ReadonlyArray<infer T> ? UpdateQueryBuilder<From<DB, T>, FromTables<DB, never, T>, FromTables<DB, never, T>, UpdateResult> : TE extends keyof DB & string ? UpdateQueryBuilder<DB, ExtractTableAlias<DB, TE>, ExtractTableAlias<DB, TE>, UpdateResult> : TE extends `${infer T} as ${infer A}` ? T extends keyof DB ? UpdateQueryBuilder<DB & ShallowRecord<A, DB[T]>, A, A, UpdateResult> : never : UpdateQueryBuilder<From<DB, TE>, FromTables<DB, never, TE>, FromTables<DB, never, TE>, UpdateResult>;
