import type { DeleteQueryBuilder } from 'kysely/dist/cjs/query-builder/delete-query-builder.js';
import type { DeleteResult } from 'kysely/dist/cjs/query-builder/delete-result.js';
import type { ShallowRecord } from 'kysely/dist/cjs/util/type-utils.js';
import type { ExtractTableAlias, From, FromTables, TableExpressionOrList } from 'kysely/dist/cjs/parser/table-parser.js';
export type DeleteFrom<DB, TE extends TableExpressionOrList<DB, never>> = TE extends ReadonlyArray<infer T> ? DeleteQueryBuilder<From<DB, T>, FromTables<DB, never, T>, DeleteResult> : TE extends keyof DB & string ? DeleteQueryBuilder<DB, ExtractTableAlias<DB, TE>, DeleteResult> : TE extends `${infer T} as ${infer A}` ? T extends keyof DB ? DeleteQueryBuilder<DB & ShallowRecord<A, DB[T]>, A, DeleteResult> : never : DeleteQueryBuilder<From<DB, TE>, FromTables<DB, never, TE>, DeleteResult>;
